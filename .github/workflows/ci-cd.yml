name: Secure CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  DB_DATABASE: laravel_shop
  DB_USERNAME: root
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  APP_URL: http://localhost:8000

jobs:
  build-and-test:
    name: Build & Unit Tests
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: ${{ env.DB_PASSWORD }}
          MYSQL_DATABASE: ${{ env.DB_DATABASE }}
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '7.4'
        extensions: mbstring, xml, bcmath, mysql
        coverage: none

    - name: Install dependencies
      run: |
        composer install --no-interaction --no-scripts
        npm install && npm run prod

    - name: Run migrations
      run: php artisan migrate --force

    - name: Run PHPUnit
      run: vendor/bin/phpunit

  sast:
    name: Static Analysis (SAST)
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
    - uses: actions/checkout@v3
    
    - name: PHPStan Analysis
      uses: docker://ghcr.io/phpstan/phpstan
      with:
        args: analyse -c phpstan.neon --level=8
    
    - name: Psalm Security Check
      uses: docker://vimeo/psalm-github-actions
      with:
        args: --taint-analysis
    
    - name: Snyk Code Analysis
      uses: snyk/actions/php@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: monitor --file=composer.lock --org=my-org --project-name=laravel-shop

  dast:
    name: Dynamic Analysis (DAST)
    runs-on: ubuntu-latest
    needs: build-and-test
    services:
      zap:
        image: owasp/zap2docker-stable
        ports:
          - 8080:8080
    steps:
    - name: Start Application
      run: php artisan serve --port=8000 &
    
    - name: OWASP ZAP Scan
      uses: zaproxy/action-full-scan@v0.3.0
      with:
        target: 'http://localhost:8000'
        rules: rules/security
        report_format: html
        report_file: zap-report.html
    
    - name: Upload ZAP Report
      uses: actions/upload-artifact@v3
      with:
        name: zap-security-report
        path: zap-report.html

  security-checks:
    name: Security Checks
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Detect Secrets
      uses: Yelp/detect-secrets@v1
      with:
        baseline: .secrets.baseline
    
    - name: Dockerfile Linter
      uses: hadolint/hadolint-action@v2
      with:
        dockerfile: Dockerfile
    
    - name: Check Dependency Licenses
      uses: fossas/spectrum@v1
      with:
        path: composer.lock

  security-gateway:
    name: Security Gateway
    runs-on: ubuntu-latest
    needs: [sast, dast, security-checks]
    steps:
    - name: Evaluate Results
      id: gate
      run: |
        if grep -q "CRITICAL" sast-report.xml; then
          echo "::error::Critical vulnerabilities detected!"
          exit 1
        fi
        
        if [ "$ZAP_SCORE" -lt 80 ]; then
          echo "::error::DAST security score too low!"
          exit 1
        fi
        
        echo "Security checks passed"
      env:
        ZAP_SCORE: ${{ fromJSON(steps.zap.outputs.results).score }}
    
    - name: Post Security Report
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const report = `## Security Scan Results
          ### SAST Issues: ${process.env.SAST_ISSUES}
          ### DAST Score: ${process.env.ZAP_SCORE}
          [Full Report](artifact/zap-report.html)`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: report
          })
